package main

import (
    "fmt"
    "net"

    "github.com/tunex/protos" // Protocol definitions for Ticket
    "github.com/tunex/utils"  // Functions to parse/verify tickets
)

// handleConnection processes incoming packets by parsing and validating the attached ticket.
func handleConnection(conn net.Conn) {
    buffer := make([]byte, 1500)
    n, err := conn.Read(buffer)
    if err != nil {
        fmt.Println("Read error:", err)
        return
    }

    // Extract payload and ticket from the received packet
    payload, ticket, err := utils.ParseTicket(buffer[:n])
    if err != nil {
        fmt.Println("Ticket parsing failed:", err)
        return
    }

    // Verify ticket is authentic and unexpired
    if ok := utils.VerifyTicket(ticket); !ok {
        fmt.Println("Invalid or expired ticket")
        return
    }

    // Log received data and payment amount
    fmt.Printf(
        "Received data: %s | Ticket amount: %d wei\n",
        string(payload),
        ticket.AmountWei,
    )

    // TODO: Forward payload to its ultimate destination (e.g., public internet)
}

func main() {
    // Listen for incoming TCP connections on port 4000
    listener, err := net.Listen("tcp", ":4000")
    if err != nil {
        panic(err)
    }
    defer listener.Close()

    fmt.Println("Tunex server listening on port 4000")
    for {
        conn, err := listener.Accept()
        if err != nil {
            fmt.Println("Accept error:", err)
            continue
        }
        go handleConnection(conn)
    }
}
